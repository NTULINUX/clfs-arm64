#!/usr/bin/env bash
#
# Copyright (C) 2016 - 2017 Alec Ari <neotheuser@ymail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TODO
# Build Crosstool-NG
# Compile root filesystem

# Environment sanity
#
# IMPORTANT NOTICE: (srsly)
# STARTDIR must be an absolute path.
# Any changes must be kept the same across all other scripts.
# Please use care when modifying these three variables.
unset STARTDIR
STARTDIR="${PWD}"
BARF_USER_CONFIG="${STARTDIR}/barf_user.config"
BARF_INTERNAL_CONFIG="${STARTDIR}/barf_internal.config"
# End of srs notice

# Load sauce for the JoJ so we can build HoH SiS
# This avoids us from having to set variables all over again.
# You owe me a star on my github project if you got all four (NOT A TYPO) references!
# cs188 FTW!
# (Normies, please ignore this entire comment section)
printf "\\n\\tChecking for pre-existing config files...\\n"
if [[ -f "${BARF_INTERNAL_CONFIG}" && -f "${BARF_INTERNAL_CONFIG}" && \
	-r "${BARF_USER_CONFIG}" && -r "${BARF_USER_CONFIG}" ]] ; then
	printf "\\tConfig files found. Loading...\\n"
	# shellcheck source=/dev/null
	source "${BARF_INTERNAL_CONFIG}"
	printf "\\tInternal config loaded.\\n"
	# shellcheck source=/dev/null
	source "${BARF_USER_CONFIG}"
	printf "\\tUser config loaded.\\n"
else
	# More fatal than Naegleria Fowleri, srs business
	printf "\\tExtremely fatal error: Config files not found or readable.\\n\\tExiting.\\n"
	exit 1
fi

#
# This is where the building starts
#

# TODO
build_crosstool()
{
sleep 0
# make crosstool-ng config ; cd into crosstool-ng ;
# ./configure --local-prefix ; ./ct-ng oldconfig? ;
# ./ct-ng build
}

# TODO
build_rootfs()
{
sleep 0
# build the kernel and all the sources here
}

#
# Add your custom packages here
#

build_custom()
{
sleep 0
# Add the build instructions for your custom packages here
# Simple example:
# `cd` into the PKG_SRCDIR as you specified in your user config file
# ./configure \
# --any-options \
# --you-need
# make -j"${JOBS}"
# make install
}

#
# Execute build
#

# TODO
# build_crosstool
# build_rootfs

build_custom

exit 0

#EOF
