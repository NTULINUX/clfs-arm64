#!/usr/bin/env bash
#
# Copyright (C) 2016 - 2017 Alec Ari <neotheuser@ymail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TODO
# Compile root filesystem

# This is here to ensure we don't accidentally break something bad
printf "\\n\\tMaking sure we are not root...\\n"
if [[ "${EUID}" == 0 ]] ; then
	printf "\\tThis script must not be run as root.\\n\\tExiting.\\n"
	exit 1
else
	printf "\\tNot root. Good.\\n"
fi


# Environment sanity
#
# IMPORTANT NOTICE: (srsly)
# STARTDIR must be an absolute path.
# Any changes must be kept the same across all other scripts.
# Please use care when modifying these three variables.
unset STARTDIR
STARTDIR="${PWD}"
BARF_USER_CONFIG="${STARTDIR}/barf_user.config"
BARF_INTERNAL_CONFIG="${STARTDIR}/barf_internal.config"
BARF_CROSS_BINDIR="${STARTDIR}/barf/barf_cross_bin"
# End of srs notice

unset CFLAGS
unset CXXFLAGS
unset LDFLAGS

# Load sauce for the JoJ so we can build HoH SiS
# This avoids us from having to set variables all over again.
# You owe me a star on my github project if you got all four (NOT A TYPO) references!
# cs188 FTW!
# (Normies, please ignore this entire comment section)
printf "\\n\\tChecking for pre-existing config files...\\n"
if [[ -f "${BARF_INTERNAL_CONFIG}" && -f "${BARF_USER_CONFIG}" && \
	-r "${BARF_INTERNAL_CONFIG}" && -r "${BARF_USER_CONFIG}" ]] ; then
	printf "\\tConfig files found. Loading...\\n"
	# shellcheck source=/dev/null
	source "${BARF_INTERNAL_CONFIG}"
	printf "\\tInternal config loaded.\\n"
	# shellcheck source=/dev/null
	source "${BARF_USER_CONFIG}"
	printf "\\tUser config loaded.\\n"
elif [[ -f "${BARF_USER_CONFIG}" && ! -f "${BARF_INTERNAL_CONFIG}" ]] ; then
	printf "\\tUnable to locate internal config file.
\\tDid you run barf_prep yet? Exiting...\\n"
	exit 1
else
	# More fatal than Naegleria Fowleri, srs business
	printf "\\tExtremely fatal error: Config files not found or readable.\\n\\tExiting.\\n"
	exit 1
fi

# If cross compiler is already built, do not clean
# If interrupted, always do a fresh restart
if [[ -d "${BARF_CROSS_BINDIR}" && "${BARF_CROSS_COMPLETE}" != 1 && "${DEVELOPER_MODE}" != 1 ]] ; then
	printf "\\n\\t%s found.
\\tCross toolchain build hung up unexpectedly.\\n
\\tDeleting %s in 10 seconds.\\n
\\tThis action cannot be undone!
\\tPress Control+C to cancel.
\\t10.\\n" "${BARF_CROSS_BINDIR}" "${BARF_CROSS_BINDIR}"
	sleep 1
	printf "\\t9.\\n"
	sleep 1
	printf "\\t8.\\n"
	sleep 1
	printf "\\t7.\\n"
	sleep 1
	printf "\\t6.\\n"
	sleep 1
	printf "\\t5.\\n"
	sleep 1
	printf "\\t4.\\n"
	sleep 1
	printf "\\t3.\\n"
	sleep 1
	printf "\\t2.\\n"
	sleep 1
	printf "\\t1.\\n"
	sleep 1
	printf "\\tCleaning up...\\n\\n"
	rm -rf "${BARF_CROSS_BINDIR}"
	printf "\\tFinished. Please restart the script.\\n"
	exit 0
elif [[ -d "${BARF_CROSS_BINDIR}" && "${BARF_CROSS_COMPLETE}" == 1 ]] ; then
	printf "\\n\\tCross toolchain already built.\\n"
fi

# If Root filesystem is already built, do not clean
# If interrupted, always do a fresh restart
if [[ -d "${BARF_ROOTFS}" && "${BARF_COMPLETE}" != 1 && "${DEVELOPER_MODE}" != 1 ]] ; then
	printf "\\n\\t%s found.
\\tRoot filesystem build hung up unexpectedly.\\n
\\tDeleting %s in 10 seconds.\\n
\\tThis action cannot be undone!
\\tPress Control+C to cancel.
\\t10.\\n" "${BARF_ROOTFS}" "${BARF_ROOTFS}"
	sleep 1
	printf "\\t9.\\n"
	sleep 1
	printf "\\t8.\\n"
	sleep 1
	printf "\\t7.\\n"
	sleep 1
	printf "\\t6.\\n"
	sleep 1
	printf "\\t5.\\n"
	sleep 1
	printf "\\t4.\\n"
	sleep 1
	printf "\\t3.\\n"
	sleep 1
	printf "\\t2.\\n"
	sleep 1
	printf "\\t1.\\n"
	sleep 1
	printf "\\tCleaning up...\\n\\n"
	rm -rf "${BARF_ROOTFS}"
	printf "\\tFinished. Please restart the script.\\n"
	exit 0
elif [[ -d "${BARF_ROOTFS}" && "${BARF_ROOTFS_COMPLETE}" == 1 ]] ; then
	printf "\\n\\tRoot filesystem already built.\\n
\\tNothing to do. Exiting.\\n"
	exit 0
fi

# Variables for Barf's internal functions (just one for now, maybe more later)
REPORT_BUG_EXIT="Please report bug to script maintainer. Exiting."

prepare_binutils ()
{
	printf "\\n\\tCopying required libraries to Binutils if needed.\\n"
if [[ ! -d "${BINUTILS_SRCDIR}"/gmp ]] ; then
	printf "\\tCopying GMP to Binutils...\\n"

	cp -pr "${GMP_SRCDIR}" "${BINUTILS_SRCDIR}"/gmp || \
	{
		printf "\\tError copying GMP to Binutils.%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${BINUTILS_SRCDIR}"/mpfr ]] ; then
	printf "\\tCopying MPFR to Binutils...\\n"

	cp -pr "${MPFR_SRCDIR}" "${BINUTILS_SRCDIR}"/mpfr || \
	{
		printf "\\tError copying MPFR to Binutils.%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${BINUTILS_SRCDIR}"/mpc ]] ; then
	printf "\\tCopying MPC to Binutils...\\n"

	cp -pr "${MPC_SRCDIR}" "${BINUTILS_SRCDIR}"/mpc || \
	{
		printf "\\tError copying MPC to Binutils.%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi
}

prepare_gcc ()
{
	printf "\\n\\tCopying required libraries to GCC if needed.\\n"
if [[ ! -d "${GCC_SRCDIR}"/gmp ]] ; then
	printf "\\tCopying GMP to GCC...\\n"

	cp -pr "${GMP_SRCDIR}" "${GCC_SRCDIR}"/gmp || \
	{
		printf "\\tError copying GMP to GCC.%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${GCC_SRCDIR}"/mpfr ]] ; then
	printf "\\tCopying MPFR to GCC...\\n"

	cp -pr "${MPFR_SRCDIR}" "${GCC_SRCDIR}"/mpfr || \
	{
		printf "\\tError copying MPFR to GCC.%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

if [[ ! -d "${GCC_SRCDIR}"/mpc ]] ; then
	printf "\\tCopying MPC to GCC...\\n"

	cp -pr "${MPC_SRCDIR}" "${GCC_SRCDIR}"/mpc || \
	{
		printf "\\tError copying MPC to GCC.%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi
}

#
# Cross toolchain
#

printf "\\n\\tCreating filesystem hierarchy for cross toolchain if needed...\\n"
if [[ ! -d "${BARF_CROSS_BINDIR}" ]] ; then
	mkdir -p "${BARF_CROSS_BINDIR}" || \
	{
		printf "\\tFailed to create %s Exiting.\\n" \
		"${BARF_CROSS_BINDIR}" ; exit 1 ;
	}
fi

if [[ ! -d "${BARF_CROSS_BINDIR}"/sysroot/usr/include ]] ; then
	mkdir -p "${BARF_CROSS_BINDIR}"/sysroot/usr/include || \
	{
		printf "\\tFailed to create %s Exiting.\\n" \
		"${BARF_CROSS_BINDIR}"/sysroot/usr/include ; exit 1 ;
	}
fi

# Create a symlink to lib64, much like the rootfs
# Hopefully this works and fixes some problems, as well as cut down the clutter.
if [[ ! -d "${BARF_CROSS_BINDIR}"/lib64 ]] ; then
	mkdir -p "${BARF_CROSS_BINDIR}"/lib64 || \
	{
		printf "\\tFailed to create %s Exiting.\\n" \
		"${BARF_CROSS_BINDIR}"/lib64 ; exit 1 ;
	}

	rm -rf "${BARF_CROSS_BINDIR}"/lib

	ln -sfv "${BARF_CROSS_BINDIR}"/lib64 "${BARF_CROSS_BINDIR}"/lib || \
	{
		printf "\\tFailed to create symlink to %s Exiting.\\n" \
		"${BARF_CROSS_BINDIR}"/lib64 ; exit 1 ;
	}
fi

# GCC only builds if Glibc's libdir is inside the target arch directory
# so we make a lib symlink here too. I'd like to fix that though.
if [[ ! -d "${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib64 ]] ; then
	mkdir -p "${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib64 || \
	{
		printf "\\tFailed to create %s Exiting.\\n" \
		"${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib64 ; exit 1 ;
	}

	rm -rf "${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib

	ln -sfv "${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib64 "${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib || \
	{
		printf "\\tFailed to create symlink to %s Exiting.\\n" \
		"${BARF_CROSS_BINDIR}"/lib64 ; exit 1 ;
	}
fi

# Cross toolchain build order:
# Kernel headers -> Binutils -> GCC -> Glibc -> GCC
# Temporarily shortened to decrease build times for internal testing

# This (long) process really makes sure the toolchain is not fragile as we
# use it for everything we can, outside the QEMU chroot.
barf_toolchain()
{
	# Binutils --with-lib-path directories
	# We really need to not spread this out so much... (better)
	SEARCH_DIR_1="${BARF_CROSS_BINDIR}/lib64"
	SEARCH_DIR_2="${BARF_CROSS_BINDIR}/lib64/gcc/${BARF_TARGET}/${GCC_VER}"
	# Can there be someway to avoid the following line and have Glibc sitting in SEARCH_DIR_1
	# like everything else?
	SEARCH_DIR_3="${BARF_CROSS_BINDIR}/${BARF_TARGET}/lib64"

	#
	# Kernel headers
	#
	printf "\\n\\tInstalling kernel headers...\\n"

	cd "${LINUX_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s\\n\\t%s\\n" \
		"${LINUX_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make mrproper

if [[ ! -d "${LINUX_SRCDIR}"/DESTDIR ]] ; then
	mkdir -p "${LINUX_SRCDIR}"/DESTDIR
else
	rm -rf "${LINUX_SRCDIR}"/DESTDIR/*
fi

	ARCH="${BARF_TARGET_ARCH}" make headers_check
	ARCH="${BARF_TARGET_ARCH}" make INSTALL_HDR_PATH="${LINUX_SRCDIR}/DESTDIR" headers_install

	cp -pr "${LINUX_SRCDIR}"/DESTDIR/include/* "${BARF_CROSS_BINDIR}"/sysroot/usr/include/ || \
	{
		printf "\\tError installing kernel headers.\\n\\t%s\\n" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
	#
	# End of kernel headers
	#

#
# Begin stage 1
#

	#
	# Binutils
	#
	prepare_binutils

	printf "\\tBuilding %s...\\n" "Binutils-${BINUTILS_VER}"
if [[ -d "${BINUTILS_SRCDIR}"/build ]] ; then

	cd "${BINUTILS_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${BINUTILS_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean
	rm -rf "${BINUTILS_SRCDIR}"/build/*
else
	mkdir -p "${BINUTILS_SRCDIR}"/build || \
	{
		printf "\\tError creating %s.\\n\\t%s\\n" \
		"${BINUTILS_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	cd "${BINUTILS_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${BINUTILS_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

	CFLAGS="${BARF_HOST_CFLAGS}" \
	CXXFLAGS="${BARF_HOST_CXXFLAGS}" \
	LDFLAGS="${BARF_HOST_LDFLAGS}" \
	../configure \
	--prefix="${BARF_CROSS_BINDIR}" \
	--build="${BARF_HOST}" \
	--host="${BARF_HOST}" \
	--target="${BARF_TARGET}" \
	--with-sysroot="${BARF_CROSS_BINDIR}"/sysroot \
	--with-lib-path="${SEARCH_DIR_1}:${SEARCH_DIR_2}:${SEARCH_DIR_3}" \
	--libdir="${BARF_CROSS_BINDIR}"/lib64 \
	--enable-werror \
	--enable-shared \
	--enable-ld=yes \
	--enable-gold=yes \
	--enable-lto \
	--enable-plugins \
	--disable-nls \
	--disable-multilib \
	--disable-sim \
	--disable-gdb || \
	{
		printf "\\tError configuring %s. Exiting.\\n" \
		"Binutils-${BINUTILS_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s. Exiting.\\n" \
		"Binutils-${BINUTILS_VER}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing %s. Exiting.\\n" \
		"Binutils-${BINUTILS_VER}" ; exit 1 ;
	}
	#
	# End of Binutils
	#


# Set the path now that we have Binutils installed
BARF_ORIG_PATH="${PATH}"
BARF_NEW_PATH="${BARF_ORIG_PATH}:${BARF_CROSS_BINDIR}/bin"
PATH="${BARF_NEW_PATH}"

	#
	# GCC stage 1
	#
	prepare_gcc

	printf "\\tBuilding %s stage 1...\\n" "GCC-${GCC_VER}"
if [[ -d "${GCC_SRCDIR}"/build ]] ; then

	cd "${GCC_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${GCC_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean
	rm -rf "${GCC_SRCDIR}"/build/*
else
	mkdir -p "${GCC_SRCDIR}"/build || \
	{
		printf "\\tError creating %s.\\n\\t%s\\n" \
		"${GCC_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	cd "${GCC_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.\\n\\t%s\\n" \
		"${GCC_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

	CFLAGS="${BARF_HOST_CFLAGS}" \
	CXXFLAGS="${BARF_HOST_CXXFLAGS}" \
	LDFLAGS="${BARF_HOST_LDFLAGS}" \
	../configure \
	--with-newlib \
	--with-cpu="${BARF_TARGET_CPU}" \
	--build="${BARF_HOST}" \
	--host="${BARF_HOST}" \
	--target="${BARF_TARGET}" \
	--prefix="${BARF_CROSS_BINDIR}" \
	--with-local-prefix="${BARF_CROSS_BINDIR}"/sysroot \
	--with-sysroot="${BARF_CROSS_BINDIR}"/sysroot \
	--libdir="${BARF_CROSS_BINDIR}"/lib64 \
	--enable-__cxa_atexit \
	--with-isl=no \
	--with-cloog=no \
	--enable-linker-build-id \
	--enable-languages=c \
	--enable-lto \
	--enable-plugin \
	--enable-threads=no \
	--without-headers \
	--disable-libatomic \
	--disable-bootstrap \
	--disable-werror \
	--disable-shared \
	--disable-libsanitizer \
	--disable-libssp \
	--disable-libgomp \
	--disable-libmudflap \
	--disable-libmpx \
	--disable-libquadmath \
	--disable-libquadmath-support \
	--disable-multilib || \
	{
		printf "\\tError configuring %s stage 1. Exiting.\\n" \
		"GCC-${GCC_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s stage 1. Exiting.\\n" \
		"GCC-${GCC_VER}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing %s stage 1. Exiting.\\n" \
		"GCC-${GCC_VER}" ; exit 1 ;
	}
	#
	# End of GCC stage 1
	#

#
# End of stage 1
#

#
# Begin final build
#

	#
	# glibc
	#
	printf "\\tBuilding %s...\\n" "glibc-${GLIBC_VER}"

if [[ -d "${GLIBC_SRCDIR}"/build ]] ; then

	cd "${GLIBC_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.%s" \
		"${GLIBC_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean
	rm -rf "${GLIBC_SRCDIR}"/build/*
else
	mkdir -p "${GLIBC_SRCDIR}"/build || \
	{
		printf "\\tError creating %s.%s" \
		"${GLIBC_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	cd "${GLIBC_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.%s" \
		"${GLIBC_SRCDIR}"/build "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
fi

	CFLAGS="${BARF_HOST_CFLAGS}" \
	CXXFLAGS="${BARF_HOST_CXXFLAGS}" \
	LDFLAGS="${BARF_HOST_LDFLAGS}" \
	../configure \
	--prefix="${BARF_CROSS_BINDIR}" \
	--build="${BARF_HOST}" \
	--host="${BARF_TARGET}" \
	--with-binutils="${BARF_CROSS_BINDIR}"/bin/ \
	--enable-kernel="${LINUX_VER}" \
	--with-headers="${BARF_CROSS_BINDIR}"/sysroot/usr/include \
	--includedir="${BARF_CROSS_BINDIR}"/sysroot/usr/include \
	--libdir="${BARF_CROSS_BINDIR}"/"${BARF_TARGET}"/lib64 \
	--with-__thread \
	--with-tls \
	--with-fp \
	--enable-sanity-checks \
	--enable-hardcoded-path-in-tests \
	--enable-werror \
	--enable-bind-now \
	--disable-build-nscd \
	--disable-nscd \
	--disable-profile \
	--without-cvs \
	--without-gd \
	--disable-timezone-tools \
	--disable-debug || \
	{
		printf "\\tError configuring %s. Exiting.\\n" \
		"glibc-${GLIBC_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s. Exiting.\\n" \
		"glibc-${GLIBC_VER}" ; exit 1 ;
	}

	# TODO: Fix some undefined references to pthread
	#make check -j"${JOBS}" || \
	#{
	#	printf "\\tTestsuite failure on %s. Exiting.\\n" \
	#	"glibc-${GLIBC_VER}" ; exit 1 ;
	#}

	make install || \
	{
		printf "\\tError installing %s. Exiting.\\n" \
		"glibc-${GLIBC_VER}" ; exit 1 ;
	}
	#
	# End of glibc
	#

	#
	# GCC final
	#
	prepare_gcc

	printf "\\tBuilding final %s...\\n" "GCC-${GCC_VER}"

	cd "${GCC_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.%s" \
		"${GCC_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean
	rm -rf "${GCC_SRCDIR}"/build/*

	CFLAGS="${BARF_HOST_CFLAGS}" \
	CXXFLAGS="${BARF_HOST_CXXFLAGS}" \
	LDFLAGS="${BARF_HOST_LDFLAGS}" \
	../configure \
	--with-cpu="${BARF_TARGET_CPU}" \
	--build="${BARF_HOST}" \
	--host="${BARF_HOST}" \
	--target="${BARF_TARGET}" \
	--prefix="${BARF_CROSS_BINDIR}" \
	--with-local-prefix="${BARF_CROSS_BINDIR}"/sysroot \
	--with-sysroot="${BARF_CROSS_BINDIR}"/sysroot \
	--libdir="${BARF_CROSS_BINDIR}"/lib64 \
	--enable-lto \
	--enable-plugin \
	--with-isl=no \
	--with-cloog=no \
	--enable-werror \
	--enable-shared \
	--enable-libsanitizer \
	--enable-libssp \
	--enable-__cxa_atexit \
	--enable-linker-build-id \
	--enable-languages=c,c++ \
	--enable-long-long \
	--disable-libmpx \
	--disable-multilib || \
	{
		printf "\\tError configuring final %s. Exiting.\\n" \
		"GCC-${GCC_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building final %s. Exiting.\\n" \
		"GCC-${GCC_VER}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing final %s. Exiting.\\n" \
		"GCC-${GCC_VER}" ; exit 1 ;
	}
	#
	# End of final GCC
	#
}

#
# End of cross toolchain
#

#
# This is where the rootfs building starts
#

init_rootfs_dirs ()
{
	# Barf structure:
	# /proc: 555
	# /root: 700
	# /run: 1777
	# /sys: 555
	# /tmp: 1777
	# All else is 755
printf "\\tCreating filesystem hierarchy on \\n\\t%s\\n\\t if needed...\\n" "${BARF_ROOTFS}"
if [[ ! -d "${BARF_ROOTFS}" ]] ; then
	mkdir -p "${BARF_ROOTFS}" || \
	{
		printf "\\tFailed to create %s Exiting.\\n" \
		"${BARF_ROOTFS}" ; exit 1 ;
	}

	install -dv -m 755 "${BARF_ROOTFS}"/{bin,sbin,boot,etc,lib64,usr,dev,opt,mnt,home} || \
	{
		printf "\\tFailed to create first batch of directories.\\n\\tExiting.\\n" ; exit 1 ;
	}

	install -dv -m 555 "${BARF_ROOTFS}"/{sys,proc} || \
	{
		printf "\\tFailed to create %s and or \\n\\t%s\\n\\tExiting.\\n" \
		"${BARF_ROOTFS}/sys" "${BARF_ROOTFS}/proc" ; exit 1 ;
	}

	install -dv -m 1777 "${BARF_ROOTFS}"/{run,tmp} || \
	{
		printf "\\tFailed to create %s and or \\n\\t%s\\n\\tExiting.\\n" \
		"${BARF_ROOTFS}/run" "${BARF_ROOTFS}/tmp" ; exit 1 ;
	}

	install -dv -m 755 "${BARF_ROOTFS}"/usr/{include,lib64,libexec,local,bin,sbin,share} || \
	{
		printf "\\tFailed to create second batch of directories.\\n\\tExiting.\\n" ; exit 1 ;
	}

	install -dv -m 700 "${BARF_ROOTFS}"/root || \
	{
		printf "\\tFailed to create %s\\n\\tExiting.\\n" \
		"${BARF_ROOTFS}/root" ; exit 1 ;
	}

	ln -sfv "${BARF_ROOTFS}"/lib64 "${BARF_ROOTFS}"/lib || \
	{
		printf "\\tFailed creating symlink to %s\\n\\tExiting.\\n" \
		"${BARF_ROOTFS}/lib64" ; exit 1 ;
	}

	ln -sfv "${BARF_ROOTFS}"/usr/lib64 "${BARF_ROOTFS}"/usr/lib || \
	{
		printf "\\tFailed creating symlink to %s\\n\\tExiting.\\n" \
		"${BARF_ROOTFS}/usr/lib64" ; exit 1 ;
	}
else
	printf "\\tAlready created.\\n\\tEnsuring we are in developer mode before proceeding...\\n"
	if [[ "${DEVELOPER_MODE}" == "1" ]] ; then
		printf "\\tDeveloper mode is set.\\n"
	else
		# Nobody should ever be here. Please file a complete bug report if you EVER see this message.
		printf "\\tUnexpected error: Filesystem hierarchy exists but is not cleaned!
\\t%s\\n" "${REPORT_BUG_EXIT}"
		exit 1
	fi
fi
}

# At least get a QEMU chroot environment going for testing
build_qemu_chroot_init()
{
	#
	# glibc for target rootfs
	#
	printf "\\tBuilding %s for target...\\n" "glibc-${GLIBC_VER}"

	cd "${GLIBC_SRCDIR}"/build || \
	{
		printf "\\tError changing directory to %s.%s" \
		"${GLIBC_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean
	rm -rf "${GLIBC_SRCDIR}"/build/*

	CFLAGS="${BARF_TARGET_CFLAGS}" \
	CXXFLAGS="${BARF_TARGET_CXXFLAGS}" \
	LDFLAGS="${BARF_TARGET_LDFLAGS}" \
	../configure \
	--prefix="${BARF_ROOTFS}"/usr \
	--host="${BARF_TARGET}" \
	--with-binutils="${BARF_CROSS_BINDIR}"/bin/ \
	--enable-kernel="${LINUX_VER}" \
	--with-headers="${BARF_CROSS_BINDIR}"/sysroot/usr/include \
	--with-__thread \
	--with-tls \
	--with-fp \
	--enable-sanity-checks \
	--enable-werror \
	--enable-stack-protector=strong \
	--enable-bind-now \
	--disable-profile \
	--without-cvs \
	--without-gd \
	--disable-debug || \
	{
		printf "\\tError configuring %s for target. Exiting.\\n" \
		"glibc-${GLIBC_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s for target. Exiting.\\n" \
		"glibc-${GLIBC_VER}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing %s for target. Exiting.\\n" \
		"glibc-${GLIBC_VER}" ; exit 1 ;
	}
	#
	# End of glibc for target rootfs
	#

	#
	# Bash
	#
	cd "${BASH_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s\\n\\t%s\\n" \
		"${BASH_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean

	CFLAGS="${BARF_TARGET_CFLAGS}" \
	CXXFLAGS="${BARF_TARGET_CXXFLAGS}" \
	LDFLAGS="${BARF_TARGET_LDFLAGS}" \
	./configure \
	--host="${BARF_TARGET}" \
	--prefix="${BARF_ROOTFS}"/usr \
	--bindir="${BARF_ROOTFS}"/bin || \
	{
		printf "\\tError configuring %s. Exiting.\\n" \
		"Bash-${BASH_VER}_${BASH_PATCHLEVEL}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s. Exiting.\\n" \
		"Bash-${BASH_VER}_${BASH_PATCHLEVEL}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing %s. Exiting.\\n" \
		"Bash-${BASH_VER}_${BASH_PATCHLEVEL}" ; exit 1 ;
	}
	#
	# End of Bash
	#

	#
	# Coreutils
	#
	cd "${COREUTILS_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s\\n\\t%s\\n" \
		"${COREUTILS_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean

	CFLAGS="${BARF_TARGET_CFLAGS}" \
	CXXFLAGS="${BARF_TARGET_CXXFLAGS}" \
	LDFLAGS="${BARF_TARGET_LDFLAGS}" \
	./configure \
	--host="${BARF_TARGET}" \
	--prefix="${BARF_ROOTFS}"/usr \
	# Provided by procps-ng
	--enable-no-install-program="kill,uptime" || \
	{
		printf "\\tError configuring %s. Exiting.\\n" \
		"Coreutils-${COREUTILS_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s. Exiting.\\n" \
		"Coreutils-${COREUTILS_VER}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing %s. Exiting.\\n" \
		"Coreutils-${COREUTILS_VER}" ; exit 1 ;
	}
	#
	# End of Coreutils
	#

	#
	# Procps-ng
	#
	cd "${PROCPS_NG_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s\\n\\t%s\\n" \
		"${PROCPS_NG_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	make distclean

	CFLAGS="${BARF_TARGET_CFLAGS}" \
	CXXFLAGS="${BARF_TARGET_CXXFLAGS}" \
	LDFLAGS="${BARF_TARGET_LDFLAGS}" \
	./configure \
	--host="${BARF_TARGET}" \
	--prefix="${BARF_ROOTFS}"/usr || \
	{
		printf "\\tError configuring %s. Exiting.\\n" \
		"Procps-ng-${PROCPS_NG_VER}" ; exit 1 ;
	}

	make -j"${JOBS}" || \
	{
		printf "\\tError building %s. Exiting.\\n" \
		"Procps-ng-${PROCPS_NG_VER}" ; exit 1 ;
	}

	make install || \
	{
		printf "\\tError installing %s. Exiting.\\n" \
		"Procps-ng-${PROCPS_NG_VER}" ; exit 1 ;
	}
	#
	# End of Procps-ng
	#
}

#
# Add your custom packages here
#

build_custom()
{
# Add the build instructions for your custom packages here
# Example:
# `cd` into the PKG_SRCDIR as you specified in your user config file
# ./configure \
# --prefix="${BARF_CROSS_BINDIR}"
# --any-options \
# --you-need
# make -j"${JOBS}"
# make install
sleep 0
}

#
# Execute build
#

barf_toolchain

init_rootfs_dirs

# TODO
# build_qemu_chroot_init

# TODO
# build_rootfs

# build_custom

exit 0

#EOF
