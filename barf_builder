#!/usr/bin/env bash
#
# Copyright (C) 2016 - 2017 Alec Ari <neotheuser@ymail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TODO:
# Add fetching / unpacking / verification of all packages
# Build Crosstool-NG
# Compile root filesystem

# printf because this is now a C program
printf "\\n\\tWelcome to NTU's Bootable ARM64 Root Filesystem (BARF) Builder!
\\tCopyright (C) 2016 - 2017 Alec Ari\\n"
sleep 3

# This is here to ensure we don't accidentally break something bad
printf "\\n\\tMaking sure we are not root...\\n"
if [[ "${EUID}" == 0 ]] ; then
	printf "\\tThis script must not be run as root.\\n\\tExiting.\\n"
	exit 1
else
	printf "\\tNot root. Good.\\n"
fi

# Environment sanity
unset STARTDIR
STARTDIR="${PWD}"

if [[ -w "${STARTDIR}" ]] ; then
	printf "\\n\\tUser has write permissions to %s\\n" "${STARTDIR}"
else
	printf "\\n\\tPlease switch to a user writeable directory, such as your home folder.\\n"
	exit 1
fi

# NOTICE: A value of 1 to the config file means true,
# while 0 means false. This logic is similar to:
# i.e. #define X_Y_Z 1 (for true) therefor NOT a typo

# Reduce lengthly printf lines
REPORT_BUG_EXIT="\\n\\tPlease report bug to script maintainer.\\n\\tExiting.\\n"

#
# User configuation:
# You may modify these default settings before running this script to your liking
#

user_defaults ()
{
	unset BARF_CONFIG
	unset BARF_SRCDIR
	unset BARF_ROOTFS
	unset BARF_PATCHDIR
	unset CORES
	unset CROSSTOOL_GIT_BRANCH
	unset CROSSTOOL_SRCDIR
	unset CROSSTOOL_BINDIR

	BARF_CONFIG="${STARTDIR}/barf.config"
	BARF_SRCDIR="${STARTDIR}/barf/src"
	BARF_ROOTFS="${STARTDIR}/barf/rootfs"
	BARF_PATCHDIR="${STARTDIR}/barf/patches"
	CORES=$(grep -c processor /proc/cpuinfo)
	CROSSTOOL_GIT_BRANCH="master"
	CROSSTOOL_SRCDIR="${STARTDIR}/barf/crosstool-ng"
	CROSSTOOL_BINDIR="${STARTDIR}/barf/cross-bin"
}

#
# End of user configuration
#

user_defaults

#
# DO NOT MODIFY: Edit only the ABOVE values instead.
# You may modify the config file itself if you have already one.
#

# Only called if $BARF_CONFIG not found or first run
generate_config ()
{
	touch "${BARF_CONFIG}"

	printf "# Automatically generated by NTU's ARM64 Root
# Please use care when modifying this file
# All paths must be absolute! \\n
CORES=%s\\n
BARF_SRCDIR=%s
BARF_ROOTFS=%s
BARF_PATCHDIR=%s
CROSSTOOL_SRCDIR=%s
CROSSTOOL_BINDIR=%s\\n" \
 "${CORES}" "${BARF_SRCDIR}" "${BARF_ROOTFS}" "${BARF_PATCHDIR}" "${CROSSTOOL_SRCDIR}" "${CROSSTOOL_BINDIR}" &> "${BARF_CONFIG}"
}

#
# End of editing notice
#

# Load config if present, generate if not
printf "\\n\\tChecking for pre-existing config file...\\n"
if [[ -f "${BARF_CONFIG}" ]] ; then
	printf "\\tConfig file found. Loading...\\n"
	# shellcheck source=/dev/null
	source "${BARF_CONFIG}"
	printf "\\tLoaded.\\n"
else
	printf "\\tConfig file not found. Creating one.\\n"
	generate_config
fi

#
# Environmental sanity checks
#

sanity_check()
{
# Redirect stdout (1) and stderr (2) to /dev/null (keep quiet)
# print error if type fails and exit with >0 exit status
if [[ ${SYSTEM_OK} == 1 ]] ; then
	printf "\\n\\tSystem already checked for prerequisites, all ok.\\n"
else
	printf "\\n\\tChecking system for prerequisites...\\n"

	type make > /dev/null 2>&1 || \
	{
		printf "\\tCannot find make. Exiting.\\n" ; exit 1 ;
	}

	type gcc > /dev/null 2>&1 || \
	{
		printf "\\tCannot find GCC. Exiting.\\n" ; exit 1 ;
	}

	type g++ > /dev/null 2>&1 || \
	{
		printf "\\tCannot find G++. Exiting.\\n" ; exit 1 ;
	}

	type ld > /dev/null 2>&1 || \
	{
		printf "\\tPlease install Binutils. Exiting.\\n" ; exit 1 ;
	}

	type libtool > /dev/null 2>&1 || \
	{
		printf "\\tCannot find libtool. Exiting.\\n" ; exit 1 ;
	}

	type wget > /dev/null 2>&1 || \
	{
		printf "\\tCannot find wget. Exiting.\\n" ; exit 1 ;
	}

	type git > /dev/null 2>&1 || \
	{
		printf "\\tCannot find git. Exiting.\\n" ; exit 1 ;
	}

	type patch > /dev/null 2>&1 || \
	{
		printf "\\tCannot find patch. Exiting.\\n" ; exit 1 ;
	}

	type autoconf > /dev/null 2>&1 || \
	{
		printf "\\tCannot find autoconf. Exiting.\\n" ; exit 1 ;
	}

	type automake > /dev/null 2>&1 || \
	{
		printf "\\tCannot find automake. Exiting.\\n" ; exit 1 ;
	}

	type grep > /dev/null 2>&1 || \
	{
		printf "\\tCannot find grep. Exiting.\\n" ; exit 1 ;
	}

	type gawk > /dev/null 2>&1 || \
	{
		printf "\\tCannot find gawk. Exiting.\\n" ; exit 1 ;
	}

	type sed > /dev/null 2>&1 || \
	{
		printf "\\tCannot find sed. Exiting.\\n" ; exit 1 ;
	}

	type m4 > /dev/null 2>&1 || \
	{
		printf "\\tCannot find m4. Exiting.\\n" ; exit 1 ;
	}

	type texi2any > /dev/null 2>&1 || \
	{
		printf "\\tCannot find texinfo. Exiting.\\n" ; exit 1 ;
	}

	type flex > /dev/null 2>&1 || \
	{
		printf "\\tCannot find flex. Exiting.\\n" ; exit 1 ;
	}

	type bc > /dev/null 2>&1 || \
	{
		printf "\\tCannot find bc. Exiting.\\n" ; exit 1 ;
	}

	type bison > /dev/null 2>&1 || \
	{
		printf "\\tCannot find bison. Exiting.\\n" ; exit 1 ;
	}

	printf "\\tObvious required tools found.
\\tChecking git version...\\n"

	# Lexicographical order workaround
	#
	# Example:
	#
	# ---cut here---
	#!/usr/bin/env bash
	#string=1.2.3
	#string2=1.10.3
	#printf "\\tIs %s greater than %s?\\n" "${string}" "${string2}"
	#if [[ "${string}" > "${string2}" ]] ; then
	#	printf "\\t%s is greater than %s.\\n" "${string}" "${string2}"
	#else
	#	printf "\\t%s is greater than %s.\\n" "${string2}" "${string}"
	#fi
	#---cut here---
	#
	# This method below avoids the potential problem (depending on locale)
	# of $string being possibly greater than $string2
	#
	# print $3 means to print only the third set of characters
	# as git --version includes "git version" as part of the output.
	#
	# cut -d. means to remove (cut) decimals
	# cut -fX means to only select this field.
	# In this case, the fields are separated by a decimal (-d.)
	# but also includes output before the first decimal, hence print $3 is used
	# to avoid the first variable (GIT_VERSION_MAJOR) being "git version X"
	#
	GIT_VERSION=$(git --version | gawk '{print $3}')
	GIT_VERSION_MAJOR=$(printf "%s" "${GIT_VERSION}" | cut -d. -f1)
	GIT_VERSION_MINOR=$(printf "%s" "${GIT_VERSION}" | cut -d. -f2)
	GIT_VERSION_PATCH=$(printf "%s" "${GIT_VERSION}" | cut -d. -f3)

	if [[ "${GIT_VERSION_MAJOR}" -ge 1 ]] ; then
		if [[ "${GIT_VERSION_MINOR}" -ge 8 ]] ; then
			printf "\\tGit 1.8 or newer.\\n"
		elif [[ "${GIT_VERSION_MINOR}" -eq 7 ]] ; then
			if [[ "${GIT_VERSION_PATCH}" -ge 10 ]] ; then
				printf "\\tGit 1.7.10 or newer\\n"
			elif [[ "${GIT_VERSION_PATCH}" -le 10 ]] ; then
					printf "\\tGit needs to be 1.7.10 or newer. Exiting.\\n"
					exit 1
			fi
		fi
	else
		printf "\\tError detecting git version.%s" "${REPORT_BUG_EXIT}"
	fi

# Only x86/amd64 are supported
	printf "\\n\\tDetecting kernel bitness...\\n"
	unset ARCH_UNAME
	ARCH_UNAME=$(uname -m)
	if [[ ${ARCH_UNAME} == *64 ]] ; then
		printf "\\t64-bit\\n"
	elif [[ ${ARCH_UNAME} == *86 ]] ; then
		printf "\\t32-bit\\n"
	else
		printf "\\tUnable to detect bitness.
\\tOnly x86 and amd64 platforms supported.\\n"
		exit 1
	fi
	SYSTEM_OK=1
	printf "\\nARCH_UNAME=%s\\n" "${ARCH_UNAME}" >> "${BARF_CONFIG}"
	printf "\\nSYSTEM_OK=%s" "${SYSTEM_OK}" >> "${BARF_CONFIG}"
fi

# Definitely not the best way to check, but it works
if [[ "${GENTOO_PASS}" == 1 || "${GENERIC_TRUE}" == 1 ]] ; then
	printf "\\n\\tSystem already passed compiler check.\\n"
else
	unset GENTOO_PASS
	unset GENERIC_TRUE
	printf "\\n\\tIs this a Gentoo system?\\n"
	if [[ $(ls /etc/env.d/gcc/config*) ]] ; then
		printf "\\tYes. Testing the build environment...\\n"
		GCC_ENV_CONF=$(cat /etc/env.d/gcc/config*)
		MAKE_PROFILE_TEST=$(ls -la /etc/portage/make.profile)
		if [[ "${GCC_ENV_CONF}" == *vanilla || "${MAKE_PROFILE_TEST}" != *hardened* ]] ; then
			printf "\\tGood, vanilla toolchain.\\n"
			GENTOO_PASS=1
			printf "\\nGENTOO_PASS=%s\\n" "${GENTOO_PASS}" >> "${BARF_CONFIG}"
		elif [[ "${MAKE_PROFILE_TEST}" == *hardened* ]] ; then
			printf "\\tNot vanilla GCC, this may cause a GCC build failure
\\tas -fPIC and potentially other CFLAGS are known to issues.
\\tYou may comment the following line out at your own risk. If you do,
\\tplease report your success, your feedback is greatly appreciated.\\n"
			exit 1
		else
			printf "\\tError detecting the build environment.%s" "${REPORT_BUG_EXIT}"
			exit 1
		fi
	else
		printf "\\tNo, assuming working toolchain.\\n"
		GENERIC_TRUE=1
		printf "\\nGENERIC_TRUE=%s\\n" "${GENERIC_TRUE}" >> "${BARF_CONFIG}"
	fi
fi

	printf "\\n\\tPerforming basic sanity checks on %s.\\n" "${BARF_CONFIG}"
	if [[ -f "${BARF_CONFIG}" && -r "${BARF_CONFIG}" ]] ; then
		printf "\\t%s is a regular file and readable.\\n" "${BARF_CONFIG}"
		if [[ -n "${BARF_ROOTFS}" ]] ; then
			printf "\\tInstallation directory is defined.\\n"
		else
			printf "\\tInstallation directory is invalid or undefined. Exiting.\\n"
			exit 1
		fi
	else
		printf "\\tError processing config file.%s" "${REPORT_BUG_EXIT}"
		exit 1
	fi
	printf "\\tAssuming everything else is ok.\\n"
}

#
# End of sanity checks
#

# If Crosstool-NG is already built, do not clean
# If interrupted, always do a fresh restart
if [[ -d "${CROSSTOOL_BINDIR}" && "${CROSSTOOL_COMPLETE}" != 1 && "${DEVELOPER_MODE}" != 1 ]] ; then
	printf "\\n\\t%s found.
\\tCrosstool-NG build hung up unexpectedly.\\n
\\tDeleting %s in 10 seconds.\\n
\\tThis action cannot be undone!
\\tPress Control+C to cancel.
\\t10.\\n" "${CROSSTOOL_BINDIR}" "${CROSSTOOL_BINDIR}"
	sleep 1
	printf "\\t9.\\n"
	sleep 1
	printf "\\t8.\\n"
	sleep 1
	printf "\\t7.\\n"
	sleep 1
	printf "\\t6.\\n"
	sleep 1
	printf "\\t5.\\n"
	sleep 1
	printf "\\t4.\\n"
	sleep 1
	printf "\\t3.\\n"
	sleep 1
	printf "\\t2.\\n"
	sleep 1
	printf "\\t1.\\n"
	sleep 1
	printf "\\tCleaning up...\\n\\n"
	rm -rf "${CROSSTOOL_BINDIR}"
	printf "\\tFinished. Please restart the script.\\n"
	exit 0
elif [[ -d "${CROSSTOOL_BINDIR}" && "${CROSSTOOL_COMPLETE}" == 1 ]] ; then
	printf "\\n\\tCrosstool-NG already built.\\n"
fi

# If Root filesystem is already built, do not clean
# If interrupted, always do a fresh restart
if [[ -d "${BARF_ROOTFS}" && "${BARF_COMPLETE}" != 1 && "${DEVELOPER_MODE}" != 1 ]] ; then
	printf "\\n\\t%s found.
\\tRoot filesystem build hung up unexpectedly.\\n
\\tDeleting %s in 10 seconds.\\n
\\tThis action cannot be undone!
\\tPress Control+C to cancel.
\\t10.\\n" "${BARF_ROOTFS}" "${BARF_ROOTFS}"
	sleep 1
	printf "\\t9.\\n"
	sleep 1
	printf "\\t8.\\n"
	sleep 1
	printf "\\t7.\\n"
	sleep 1
	printf "\\t6.\\n"
	sleep 1
	printf "\\t5.\\n"
	sleep 1
	printf "\\t4.\\n"
	sleep 1
	printf "\\t3.\\n"
	sleep 1
	printf "\\t2.\\n"
	sleep 1
	printf "\\t1.\\n"
	sleep 1
	printf "\\tCleaning up...\\n\\n"
	rm -rf "${BARF_ROOTFS}"
	printf "\\tFinished. Please restart the script.\\n"
	exit 0
elif [[ -d "${BARF_ROOTFS}" && "${ROOTFS_COMPLETE}" == 1 ]] ; then
	printf "\\n\\tRoot filesystem already built.\\n
\\t%s and\\n\\t%s must be manually removed to proceed.
\\tNothing to do. Exiting.\\n" "${BARF_ROOTDIR}" "${BARF_CONFIG}"
	exit 0
fi

init_srcdirs ()
{
	printf "\\n\\tCreating source work directories...\\n"

	# In case of wonky config file, we always make sure we can create the directories
	mkdir -p "${CROSSTOOL_SRCDIR}" || \
	{
		printf "\\tFailed to create %s. Exiting.\\n" \
		"${CROSSTOOL_SRCDIR}" ; exit 1 ;
	}

	mkdir -p "${BARF_SRCDIR}" || \
	{
		printf "\\tFailed to create %s. Exiting.\\n" \
		"${BARF_SRCDIR}" ; exit 1 ;
	}

}

printf "\\n\\tChecking if %s exists...\\n" "${CROSSTOOL_SRCDIR}"
if [[ -d "${CROSSTOOL_SRCDIR}" ]] ; then
	printf "\\tIt does.\\n"
else
	printf "\\tIt does not, must be your first rodeo.\\n
\\tWelcome! I really hope this script works for you.
\\tPlease report any bugs to the author of this program.\\n"
	init_srcdirs
fi

# unset in case set previously
unset CFLAGS
unset CXXFLAGS
unset LDFLAGS

# TODO
# CROSSTOOL_GIT=""

# Reduce bandwidth, speed up the cloning process
CROSSTOOL_GIT_OPTS=(--depth"="1 -b "${CROSSTOOL_GIT_BRANCH}" --single-branch)

# TODO: IP-Tables Flex Texinfo Bison Bc Elfutils Libtool XZ-Utils lzop lz4 wget automake autoconf m4
LINUX_VER="4.9.35"
LINUX_MAJOR_VER="v4.x"
GCC_VER="6.3.0"
MPFR_VER="3.1.5"
MPC_VER="1.0.3"
GMP_VER="6.1.2"
GLIBC_VER="2.25"
GPERF_VER="3.1"
BASH_VER="4.4"
BASH_VER_CUT="44"
BASH_PATCHLEVEL="p12"
BINUTILS_VER="2.28"
NCURSES_VER="6.0"
ZLIB_VER="1.2.11"
COREUTILS_VER="8.27"
UTIL_LINUX_VER="2.30"
FINDUTILS_VER="4.6.0"
GREP_VER="3.1"
GZIP_VER="1.8"
SED_VER="4.4"
GAWK_VER="4.1.4"
PAM_VER="1.3.0"
SHADOW_VER="4.5"
OPENRC_VER="0.27.2"
SYSVINIT_VER="2.88dsf"
EUDEV_VER="3.2.2"
PROCPS_VER="3.3.12"
LIBRESSL_VER="2.5.4"
IPROUTE2_VER="4.11.0"
NET_TOOLS_VER="1.60"
TAR_VER="1.29"

# TODO: IP-Tables Flex Texinfo Bison Bc Elfutils Libtool XZ-Utils lzop lz4 wget automake autoconf m4
LINUX_LOC="https://cdn.kernel.org/pub/linux/kernel/${LINUX_MAJOR_VER}/linux-${LINUX_VER}.tar.xz"
GCC_LOC="ftp://ftp.gnu.org/gnu/gcc/gcc-${GCC_VER}/gcc-${GCC_VER}.tar.bz2"
MPFR_LOC="https://ftp.gnu.org/gnu/mpfr/mpfr-${MPFR_VER}.tar.xz"
MPC_LOC="http://ftp.gnu.org/gnu/mpc/mpc-${MPC_VER}.tar.gz"
GMP_LOC="https://ftp.gnu.org/gnu/gmp/gmp-${GMP_VER}.tar.xz"
GLIBC_LOC="https://ftp.gnu.org/gnu/libc/glibc-${GLIBC_VER}.tar.bz2"
GPERF_LOC="https://ftp.gnu.org/gnu/gperf/gperf-${GPERF_VER}.tar.gz"
BASH_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}.tar.gz"
BASH_001_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-001"
BASH_002_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-002"
BASH_003_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-003"
BASH_004_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-004"
BASH_005_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-005"
BASH_006_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-006"
BASH_007_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-007"
BASH_008_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-008"
BASH_009_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-009"
BASH_010_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-010"
BASH_011_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-011"
BASH_012_LOC="https://ftp.gnu.org/gnu/bash/bash-${BASH_VER}-patches/bash${BASH_VER_CUT}-012"
BINUTILS_LOC="https://ftp.gnu.org/gnu/binutils/binutils-${BINUTILS_VER}.tar.bz2"
NCURSES_LOC="http://ftp.gnu.org/gnu/ncurses/ncurses-${NCURSES_VER}.tar.gz"
ZLIB_LOC="https://www.zlib.net/zlib-${ZLIB_VER}.tar.gz"
COREUTILS_LOC="http://ftp.gnu.org/gnu/coreutils/coreutils-${COREUTILS_VER}.tar.xz"
UTIL_LINUX_LOC="https://www.kernel.org/pub/linux/utils/util-linux/v${UTIL_LINUX_VER}/util-linux-${UTIL_LINUX_VER}.tar.xz"
FINUTILS_LOC="http://ftp.gnu.org/gnu/findutils/findutils-${FINDUTILS_VER}.tar.gz"
GREP_LOC="http://ftp.gnu.org/gnu/grep/grep-${GREP_VER}.tar.xz"
GZIP_LOC="http://ftp.gnu.org/gnu/gzip/gzip-${GZIP_VER}.tar.xz"
SED_LOC="http://ftp.gnu.org/gnu/sed/sed-${SED_VER}.tar.xz"
GAWK_LOC="http://ftp.gnu.org/gnu/gawk/gawk-${GAWK_VER}.tar.xz"
PAM_LOC="http://www.linux-pam.org/library/Linux-PAM-${PAM_VER}.tar.gz"
SHADOW_LOC="https://github.com/shadow-maint/shadow/releases/download/${SHADOW_VER}/shadow-${SHADOW_VER}.tar.xz"
OPENRC_LOC="https://github.com/OpenRC/openrc/archive/${OPENRC_VER}.tar.gz"
SYSVINIT_LOC="http://download.savannah.gnu.org/releases/sysvinit/sysvinit-${SYSVINIT_VER}.tar.bz2"
EUDEV_LOC="https://github.com/gentoo/eudev/archive/v${EUDEV_VER}.tar.gz"
PROCPS_LOC="https://downloads.sourceforge.net/project/procps-ng/Production/procps-ng-${PROCPS_VER}.tar.xz"
LIBRESSL_LOC="https://ftp.openbsd.org/pub/OpenBSD/LibreSSL/libressl-${LIBRESSL_VER}.tar.gz"
IPROUTE2_LOC="https://www.kernel.org/pub/linux/utils/net/iproute2/iproute2-${IPROUTE2_VER}.tar.xz"
NET_TOOLS_LOC="https://downloads.sourceforge.net/project/net-tools/net-tools-${NET_TOOLS_VER}.tar.bz2"
TAR_LOC="http://ftp.gnu.org/gnu/tar/tar-${TAR_VER}.tar.xz"

# TODO: IP-Tables Flex Texinfo Bison Bc Elfutils Libtool XZ-Utils lzop lz4 wget automake autoconf m4
LINUX_COMP="${TARDIR}/linux-${LINUX_VER}.tar.xz"
GCC_COMP="${TARDIR}/gcc-${GCC_VER}.tar.bz2"
MPFR_COMP="${TARDIR}/mpfr-${MPFR_VER}.tar.xz"
MPC_COMP="${TARDIR}/mpc-${MPC_VER}.tar.gz"
GMP_COMP="${TARDIR}/gmp-${GMP_VER}.tar.xz"
GLIBC_COMP="${TARDIR}/glibc-${GLIBC_VER}.tar.bz2"
GPERF_COMP="${TARDIR}/gperf-${GPERF_VER}.tar.gz"
BASH_COMP="${TARDIR}/bash-${BASH_VER}.tar.gz"
BINUTILS_COMP="${TARDIR}/binutils-${BINUTILS_VER}.tar.bz2"
NCURSES_COMP="${TARDIR}/ncurses-${NCURSES_VER}.tar.gz"
ZLIB_COMP="${TARDIR}/zlib-${ZLIB_VER}.tar.gz"
COREUTILS_COMP="${TARDIR}/coreutils-${COREUTILS_VER}.tar.xz"
UTIL_LINUX_COMP="${TARDIR}/util-linux-${UTIL_LINUX_VER}.tar.xz"
FINDUTILS_COMP="${TARDIR}/findutils-${FINDUTILS_VER}.tar.gz"
GREP_COMP="${TARDIR}/grep-${GREP_VER}.tar.xz"
GZIP_COMP="${TARDIR}/gzip-${GZIP_VER}.tar.xz"
SED_COMP="${TARDIR}/sed-${SED_VER}.tar.xz"
GAWK_COMP="${TARDIR}/gawk-${GAWK_VER}.tar.xz"
PAM_COMP="${TARDIR}/Linux-PAM-${PAM_VER}.tar.gz"
SHADOW_COMP="${TARDIR}/shadow-${SHADOW_VER}.tar.xz"
OPENRC_COMP="${TARDIR}/${OPENRC_VER}.tar.gz"
SYSVINIT_COMP="${TARDIR}/sysvinit-${SYSVINIT_VER}.tar.bz2"
EUDEV_COMP="${TARDIR}/v${EUDEV_VER}.tar.gz"
PROCPS_COMP="${TARDIR}/procps-ng-${PROCPS_VER}.tar.xz"
LIBRESSL_COMP="${TARDIR}/libressl-${LIBRESSL_VER}.tar.gz"
IPROUTE2_COMP="${TARDIR}/iproute2-${IPROUTE2_VER}.tar.xz"
NET_TOOLS_COMP="${TARDIR}/net-tools-${NET_TOOLS_VER}.tar.bz2"
TAR_COMP="${TARDIR}/tar-${TAR_VER}.tar.xz"

# TODO: IP-Tables Flex Texinfo Bison Bc Elfutils Libtool XZ-Utils lzop lz4 wget automake autoconf m4
LINUX_SRCDIR="${BARF_SRCDIR}/linux-${LINUX_VER}"
GCC_SRCDIR="${BARF_SRCDIR}/gcc-${GCC_VER}"
MPFR_SRCDIR="${BARF_SRCDIR}/mpfr-${MPFR_VER}"
MPC_SRCDIR="${BARF_SRCDIR}/mpc-${MPC_VER}"
GMP_SRCDIR="${BARF_SRCDIR}/gmp-${GMP_VER}"
GLIBC_SRCDIR="${BARF_SRCDIR}/glibc-${GLIBC_VER}"
GPERF_SRCDIR="${BARF_SRCDIR}/gperf-${GPERF_VER}"
BASH_SRCDIR="${BARF_SRCDIR}/bash-${BASH_VER}_${BASH_PATCHLEVEL}"
BINUTILS_SRCDIR="${BARF_SRCDIR}/binutils-${BINUTILS_VER}"
NCURSES_SRCDIR="${BARF_SRCDIR}/ncurses-${NCURSES_VER}"
ZLIB_SRCDIR="${BARF_SRCDIR}/zlib-${ZLIB_VER}"
COREUTILS_SRCDIR="${BARF_SRCDIR}/coreutils-${COREUTILS_VER}"
UTIL_LINUX_SRCDIR="${BARF_SRCDIR}/util-linux-${UTIL_LINUX_VER}"
FINDUTILS_SRCDIR="${BARF_SRCDIR}/findutils-${FINDUTILS_VER}"
GREP_SRCDIR="${BARF_SRCDIR}/grep-${GREP_VER}"
GZIP_SRCDIR="${BARF_SRCDIR}/gzip-${GZIP_VER}"
SED_SRCDIR="${BARF_SRCDIR}/sed-${SED_VER}"
GAWK_SRCDIR="${BARF_SRCDIR}/gawk-${GAWK_VER}"
PAM_SRCDIR="${BARF_SRCDIR}/pam-${PAM_VER}"
SHADOW_SRCDIR="${BARF_SRCDIR}/shadow-${SHADOW_VER}"
OPENRC_SRCDIR="${BARF_SRCDIR}/openrc-${OPENRC_VER}"
SYSVINIT_SRCDIR="${BARF_SRCDIR}/sysvinit-${SYSVINIT_VER}"
EUDEV_SRCDIR="${BARF_SRCDIR}/eudev-${EUDEV_VER}"
PROCPS_SRCDIR="${BARF_SRCDIR}/procps-${PROCPS_VER}"
LIBRESSL_SRCDIR="${BARF_SRCDIR}/libressl-${LIBRESSL_VER}"
IPROUTE2_SRCDIR="${BARF_SRCDIR}/iproute2-${IPROUTE2_VER}"
NET_TOOLS_SRCDIR="${BARF_SRCDIR}/net-tools-${NET_TOOLS_VER}"
TAR_SRCDIR="${BARF_SRCDIR}/tar-${TAR_VER}"

#
# Fetch any required sources
#

fetch_sources ()
{
	cd "${BARF_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.%s" \
		"${BARF_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	printf "\\n\\tFetching sources if needed...\\n"

	printf "\\n\\tUpdating Binutils...\\n"

# TODO: Crosstool-NG sources
#if [[ ! -d "${CROSSTOOL_SRCDIR}" ]] ; then
#	printf "\\n\\tFetching Crosstool-NG via git...\\n"
#	git clone "${CROSSTOOL_GIT_OPTS[@]}" "${CROSSTOOL_GIT}" "${CROSSTOOL_SRCDIR}"
#fi

	# Linux sources
if [[ ! -f "${LINUX_COMP}" ]] ; then
	printf "\\n\\tDownloading Linux sources via wget...\\n"
	wget -c "${LINUX_LOC}" || \
	{
		printf "\\tError downloading Linux-%s. Exiting.\\n" \
		"${LINUX_VER}" ; exit 1 ;
	}
fi

	# TODO: Add remaining sources to possibly fetch
}

#
# End of fetch sources
#

#
# Unpack any required sources
#

# TODO: IP-Tables Flex Texinfo Bison Bc Elfutils Libtool XZ-Utils lzop lz4 wget automake autoconf m4
unpack_sources ()
{
	printf "\\tUnpacking any sources if needed...\\n"

if [[ ! -d "${LINUX_SRCDIR}" ]] ; then
	tar xf "${LINUX_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${LINUX_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${GCC_SRCDIR}" ]] ; then
	tar xf "${GCC_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GCC_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${MPFR_SRCDIR}" ]] ; then
	tar xf "${MPFR_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${MPFR_COMP}" ; exit 1 ;
	}
fi


if [[ ! -d "${MPC_SRCDIR}" ]] ; then
	tar xf "${MPC_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${MPC_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${GMP_SRCDIR}" ]] ; then
	tar xf "${GMP_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GMP_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${GLIBC_SRCDIR}" ]] ; then
	tar xf "${GLIBC_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GLIBC_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${GPERF_SRCDIR}" ]] ; then
	tar xf "${GPERF_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GPERF_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${BASH_SRCDIR}" ]] ; then
	tar xf "${BASH_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${BASH_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${BINUTILS_SRCDIR}" ]] ; then
	tar xf "${BINUTILS_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${BINUTILS_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${NCURSES_SRCDIR}" ]] ; then
	tar xf "${NCURSES_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${NCURSES_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${ZLIB_SRCDIR}" ]] ; then
	tar xf "${ZLIB_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${ZLIB_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${COREUTILS_SRCDIR}" ]] ; then
	tar xf "${COREUTILS_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${COREUTILS_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${UTIL_LINUX_SRCDIR}" ]] ; then
	tar xf "${UTIL_LINUX_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${UTIL_LINUX_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${FINDUTILS_SRCDIR}" ]] ; then
	tar xf "${FINDUTILS_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${FINDUTILS_TARDIR}" ; exit 1 ;
	}
fi

if [[ ! -d "${GREP_SRCDIR}" ]] ; then
	tar xf "${GREP_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GREP_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${GZIP_SRCDIR}" ]] ; then
	tar xf "${GZIP_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GZIP_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${SED_SRCDIR}" ]] ; then
	tar xf "${SED_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${SED_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${GAWK_SRCDIR}" ]] ; then
	tar xf "${GAWK_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${GAWK_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${PAM_SRCDIR}" ]] ; then
	tar xf "${PAM_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${PAM_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${SHADOW_SRCDIR}" ]] ; then
	tar xf "${SHADOW_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${SHADOW_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${SYSVINIT_SRCDIR}" ]] ; then
	tar xf "${SYSVINIT_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${SYSVINIT_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${EUDEV_SRCDIR}" ]] ; then
	tar xf "${EUDEV_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${EUDEV_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${PROCPS_SRCDIR}" ]] ; then
	tar xf "${PROCPS_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${PROCPS_COMP}" ; exit 1 ;
	}
fi

	# TODO:
	# OpenRC

if [[ ! -d "${LIBRESSL_SRCDIR}" ]] ; then
	tar xf "${LIBRESSL_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${LIBRESSL_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${IPROUTE2_SRCDIR}" ]] ; then
	tar xf "${IPROUTE2_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${IPROUTE2_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${NET_TOOLS_SRCDIR}" ]] ; then
	tar xf "${NET_TOOLS_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${NET_TOOLS_COMP}" ; exit 1 ;
	}
fi

if [[ ! -d "${TAR_SRCDIR}" ]] ; then
	tar xf "${TAR_COMP}" -C "${BARF_SRCDIR}"/ || \
	{
		printf "\tError decompressing %s. Exiting.\n" "${TAR_COMP}" ; exit 1 ;
	}
fi

	# TODO: Add remaining sources to possibly unpack
}

#
# End of unpack sources
#

#
# Verify sources
#

verify_sources ()
{
	printf "\\n\\tVerifying sources...\\n"

	test -d "${LINUX_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${LINUX_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${GMP_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${GMP_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${MPFR_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${MPFR_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${MPC_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${MPC_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${BINUTILS_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${BINUTILS_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${GLIBC_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${GLIBC_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	test -d "${GCC_SRCDIR}" || \
	{
		printf "\\tUnexpected error: %s cannot be found.%s" \
		"${GCC_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}
	# TODO: Add remaining sources to verify_sources
	printf "\\tAll sources verified.\\n"
}

#
# End of verify sources
#

#
# Prepare sources (rename source directories, apply patches, etc)
#

# TODO: Bash p12
prepare_sources ()
{
	sleep 0
}

# TODO:
update_crosstool ()
{
if [[ -d "${CROSSTOOL_SRCDIR}" ]] ; then
	printf "\\n\\tUpdating Crosstool-NG...\\n"

	cd "${CROSSTOOL_SRCDIR}" || \
	{
		printf "\\tError changing directory to %s.%s" \
		"${CROSSTOOL_SRCDIR}" "${REPORT_BUG_EXIT}" ; exit 1 ;
	}

	git reset --hard HEAD
	git checkout "${CROSSTOOL_GIT_BRANCH}"
	git pull
else
	printf "\\n\\tUnexpected error: Cannot find Crosstool-NG git sources.%s" "${REPORT_BUG_EXIT}"
	exit 1
fi
}

#
# End of update sources
#

main ()
{
	# TODO
	sanity_check

	# TODO
	# fetch_sources

	# TODO
	# unpack_sources

	# TODO
	# verify_sources

	# TODO:
	# update_crosstool
}

#
# This is where the building starts
#

# TODO
build_crosstool()
{
sleep 0
# make crosstool-ng config ; cd into crosstool-ng ;
# ./configure --local-prefix ; ./ct-ng oldconfig? ;
# ./ct-ng build
}

# TODO
build_rootfs()
{
sleep 0
# build the kernel and all the sources here
}

#
# Execute build
#

# TODO:
# build_crosstool
# build_rootfs

# TODO:
main

exit 0

#EOF
